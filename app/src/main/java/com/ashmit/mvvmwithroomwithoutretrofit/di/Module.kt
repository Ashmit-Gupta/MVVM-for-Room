package com.ashmit.mvvmwithroomwithoutretrofit.di

import android.content.Context
import androidx.room.Room
import com.ashmit.mvvmwithroomwithoutretrofit.data.db.QuoteDB
import com.ashmit.mvvmwithroomwithoutretrofit.data.db.QuoteDao
import com.ashmit.mvvmwithroomwithoutretrofit.data.repository.Repository
import com.ashmit.mvvmwithroomwithoutretrofit.ui.viewmodel.MainViewModel
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object MVVMModule {
//    A DAO needs to be linked to a specific database to work because the actual implementation of these methods is generated by Room at compile-time, and they rely on the database instance to execute SQL queries.
    @Provides
    @Singleton
    fun providesDatabase(@ApplicationContext context :Context):QuoteDB{
        return Room.databaseBuilder(context.applicationContext , QuoteDB::class.java ,"quote_db" )
            .createFromAsset("quotes.db")
            .build()
    }

    @Provides
    @Singleton
    fun providesQuotesDao(quoteDatabase : QuoteDB):QuoteDao{
        return quoteDatabase.quoteDao()
    }

    @Provides
    fun getMainViewModel(repository: Repository): MainViewModel{
        return MainViewModel(repository)
    }

    @Provides
    @Singleton
    fun provideRepository(quoteDao : QuoteDao):Repository{
        return Repository(quoteDao)
    }
}